/*
* generated by Xtext
*/
package de.nittka.tooling.jtag.ui.quickfix

import com.drew.imaging.ImageMetadataReader
import com.drew.metadata.Metadata
import com.drew.metadata.exif.ExifSubIFDDirectory
import de.nittka.tooling.jtag.jtag.Folder
import de.nittka.tooling.jtag.jtag.JtagFactory
import de.nittka.tooling.jtag.ui.validation.JtagUIValidator
import java.text.SimpleDateFormat
import java.util.TimeZone
import org.eclipse.core.resources.IFile
import org.eclipse.core.runtime.Path
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import java.util.List
import de.nittka.tooling.jtag.jtag.File
import java.text.Collator
import java.util.Locale

//import org.eclipse.xtext.ui.editor.quickfix.Fix
//import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
//import org.eclipse.xtext.validation.Issue

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class JtagQuickfixProvider extends DefaultQuickfixProvider {

	@Fix(JtagUIValidator::MISSING_XARCHIVE_FILE)
	def addMissingXarchive(Issue issue, IssueResolutionAcceptor acceptor) {
		val fileNames=issue.data.get(0).split(";;").toList
		val sorter=Collator.getInstance(Locale.GERMANY)
		acceptor.accept(issue, 'Jtag entries for '+fileNames.join(",\n"), 'creates new entries', null) [
			obj, context |
			val List<File>entriesToAdd=newArrayList
			fileNames.sortInplace([a,b|sorter.compare(a,b)]).forEach[fileName|
				val file=context.xtextDocument.getAdapter(IFile)
				val target=file.parent.getFile(new Path(fileName))
				val factory =JtagFactory.eINSTANCE
				val newEntry=factory.createFile
				newEntry.setFileName(factory.createFileName)
				newEntry.fileName.setFileName(target.fullPath.removeFileExtension.lastSegment)
				newEntry.fileName.setExtension(target.fileExtension)
				newEntry.setDate(getDate(target))
				newEntry.tags.add("quickfix")
				entriesToAdd.add(newEntry)
			]
			val folder=obj as Folder
			folder.files.addAll(entriesToAdd)
		]
	}

	def private String getDate(IFile f){
		try{
			val Metadata metadata = ImageMetadataReader.readMetadata(f.contents);
			val dir= metadata.directories.filter(ExifSubIFDDirectory).head
			if(dir!==null){
				val date=(dir as ExifSubIFDDirectory).getDateOriginal(TimeZone.^default)
				val SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd")
				return format.format(date)
			}
		}catch(Exception e){
			//ignore
		}
		return null
	}
}
